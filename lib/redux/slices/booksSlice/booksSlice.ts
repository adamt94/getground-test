/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

import { getBooks } from './thunks'
import { Book } from './fetchBooks'
/* Types */
export interface BooksSliceState {
    value: Book[]
    status: 'idle' | 'loading' | 'failed'
  }

const initialState: BooksSliceState = {
  value: [],
  status: 'loading',
}

export const booksSlice = createSlice({
  name: 'books',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getBooks.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(getBooks.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value = action.payload.books
        state.count = action.payload.count
      })
  },
})


export default booksSlice.reducer


